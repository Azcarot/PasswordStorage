// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azcarot/PasswordStorage/internal/storage (interfaces: PgxConn)

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	storage "github.com/Azcarot/PasswordStorage/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockPgxConn is a mock of PgxConn interface.
type MockPgxConn struct {
	ctrl     *gomock.Controller
	recorder *MockPgxConnMockRecorder
}

// MockPgxConnMockRecorder is the mock recorder for MockPgxConn.
type MockPgxConnMockRecorder struct {
	mock *MockPgxConn
}

// NewMockPgxConn creates a new mock instance.
func NewMockPgxConn(ctrl *gomock.Controller) *MockPgxConn {
	mock := &MockPgxConn{ctrl: ctrl}
	mock.recorder = &MockPgxConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgxConn) EXPECT() *MockPgxConnMockRecorder {
	return m.recorder
}

// CheckUserExists mocks base method.
func (m *MockPgxConn) CheckUserExists(arg0 context.Context, arg1 storage.UserData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExists indicates an expected call of CheckUserExists.
func (mr *MockPgxConnMockRecorder) CheckUserExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExists", reflect.TypeOf((*MockPgxConn)(nil).CheckUserExists), arg0, arg1)
}

// CheckUserPassword mocks base method.
func (m *MockPgxConn) CheckUserPassword(arg0 context.Context, arg1 storage.UserData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserPassword", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserPassword indicates an expected call of CheckUserPassword.
func (mr *MockPgxConnMockRecorder) CheckUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserPassword", reflect.TypeOf((*MockPgxConn)(nil).CheckUserPassword), arg0, arg1)
}

// CreateNewUser mocks base method.
func (m *MockPgxConn) CreateNewUser(arg0 context.Context, arg1 storage.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewUser indicates an expected call of CreateNewUser.
func (mr *MockPgxConnMockRecorder) CreateNewUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockPgxConn)(nil).CreateNewUser), arg0, arg1)
}

// CreateTablesForGoKeeper mocks base method.
func (m *MockPgxConn) CreateTablesForGoKeeper() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateTablesForGoKeeper")
}

// CreateTablesForGoKeeper indicates an expected call of CreateTablesForGoKeeper.
func (mr *MockPgxConnMockRecorder) CreateTablesForGoKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTablesForGoKeeper", reflect.TypeOf((*MockPgxConn)(nil).CreateTablesForGoKeeper))
}
